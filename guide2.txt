# Arizona Sunshine — Phase 1 Backend (Django + DRF)
# Project scaffold, core models, REST API, Playwright scraper, and setup docs.

# Project structure (files shown below)
# -------------------------------------------------
# arizona_sunshine_backend/
# ├── README.md
# ├── requirements.txt
# ├── .env.sample
# ├── docker-compose.yml
# ├── Dockerfile
# ├── manage.py
# ├── config/
# │   ├── __init__.py
# │   ├── settings.py
# │   ├── urls.py
# │   └── wsgi.py
# ├── transparency/
# │   ├── __init__.py
# │   ├── admin.py
# │   ├── apps.py
# │   ├── models.py
# │   ├── serializers.py
# │   ├── views.py
# │   ├── urls.py
# │   ├── management/
# │   │   └── commands/
# │   │       └── scrape_soi.py
# │   └── tasks.py
# └── scripts/
#     └── load_static_ie_db.py

# -------------------------
# requirements.txt
# -------------------------
# Django and tooling
Django>=4.2
djangorestframework
psycopg2-binary
python-dotenv
playwright
celery[redis]
redis
requests
beautifulsoup4

# -------------------------
# .env.sample
# -------------------------
DJANGO_SECRET_KEY=replace-with-secret
DJANGO_DEBUG=True
POSTGRES_DB=az_sunshine
POSTGRES_USER=az_user
POSTGRES_PASSWORD=az_pass
POSTGRES_HOST=db
POSTGRES_PORT=5432
DATABASE_URL=postgres://az_user:az_pass@db:5432/az_sunshine
CELERY_BROKER_URL=redis://redis:6379/0
CELERY_RESULT_BACKEND=redis://redis:6379/0

# -------------------------
# docker-compose.yml (sample)
# -------------------------
version: '3.8'
services:
  db:
    image: postgres:15
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
  redis:
    image: redis:7
  web:
    build: .
    command: bash -c "python manage.py migrate && python manage.py runserver 0.0.0.0:8000"
    volumes:
      - .:/app
    ports:
      - '8000:8000'
    env_file: .env
    depends_on:
      - db
      - redis
  worker:
    build: .
    command: celery -A config.celery_app worker --loglevel=info
    env_file: .env
    depends_on:
      - db
      - redis

volumes:
  postgres_data:

# -------------------------
# Dockerfile (simple)
# -------------------------
FROM python:3.11-slim
WORKDIR /app
COPY requirements.txt ./
RUN pip install --no-cache-dir -r requirements.txt
COPY . .
# Install playwright browsers
RUN python -m playwright install --with-deps
CMD ["python","manage.py","runserver","0.0.0.0:8000"]

# -------------------------
# config/settings.py (important excerpts)
# -------------------------
import os
from pathlib import Path
from dotenv import load_dotenv
import dj_database_url

BASE_DIR = Path(__file__).resolve().parent.parent
load_dotenv(BASE_DIR / '..' / '.env')

SECRET_KEY = os.getenv('DJANGO_SECRET_KEY')
DEBUG = os.getenv('DJANGO_DEBUG', 'False') == 'True'
ALLOWED_HOSTS = ['*']

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'transparency',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

DATABASES = {
    'default': dj_database_url.config(default=os.getenv('DATABASE_URL'))
}

STATIC_URL = '/static/'

# Celery (if you choose to use it)
CELERY_BROKER_URL = os.getenv('CELERY_BROKER_URL')
CELERY_RESULT_BACKEND = os.getenv('CELERY_RESULT_BACKEND')

# -------------------------
# config/urls.py
# -------------------------
from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('api/', include('transparency.urls')),
]

# -------------------------
# transparency/models.py
# -------------------------
from django.db import models

class Race(models.Model):
    name = models.CharField(max_length=200)
    office = models.CharField(max_length=200, blank=True, null=True)
    district = models.CharField(max_length=100, blank=True, null=True)

    def __str__(self):
        return f"{self.name}"

class Candidate(models.Model):
    SOURCE_CHOICES = [
        ('AZ_SOS', 'Arizona SOS'),
        ('COUNTY', 'County'),
        ('OTHER', 'Other'),
    ]
    name = models.CharField(max_length=255)
    race = models.ForeignKey(Race, on_delete=models.SET_NULL, null=True, blank=True)
    email = models.EmailField(blank=True, null=True)
    filing_date = models.DateField(blank=True, null=True)
    source = models.CharField(max_length=20, choices=SOURCE_CHOICES, default='AZ_SOS')
    contacted = models.BooleanField(default=False)
    contacted_at = models.DateTimeField(null=True, blank=True)
    notes = models.TextField(blank=True, null=True)
    external_id = models.CharField(max_length=255, blank=True, null=True, unique=True)

    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        ordering = ['-created_at']

    def __str__(self):
        return self.name

class IECommittee(models.Model):
    name = models.CharField(max_length=255)
    committee_type = models.CharField(max_length=100, blank=True, null=True)
    ein = models.CharField(max_length=100, blank=True, null=True)

    def __str__(self):
        return self.name

class DonorEntity(models.Model):
    name = models.CharField(max_length=255)
    entity_type = models.CharField(max_length=100, blank=True, null=True)
    total_contribution = models.DecimalField(max_digits=18, decimal_places=2, default=0)

    def __str__(self):
        return self.name

# -------------------------
# transparency/admin.py
# -------------------------
from django.contrib import admin
from .models import Candidate, Race, IECommittee, DonorEntity

@admin.register(Candidate)
class CandidateAdmin(admin.ModelAdmin):
    list_display = ('name', 'race', 'email', 'contacted', 'filing_date', 'source')
    list_filter = ('contacted', 'source', 'race')
    search_fields = ('name', 'email')

admin.site.register(Race)
admin.site.register(IECommittee)
admin.site.register(DonorEntity)

# -------------------------
# transparency/serializers.py
# -------------------------
from rest_framework import serializers
from .models import Candidate, Race, IECommittee, DonorEntity

class RaceSerializer(serializers.ModelSerializer):
    class Meta:
        model = Race
        fields = '__all__'

class CandidateSerializer(serializers.ModelSerializer):
    race = RaceSerializer(read_only=True)

    class Meta:
        model = Candidate
        fields = ['id','name','race','email','filing_date','source','contacted','contacted_at','notes','external_id','created_at']

class IECommitteeSerializer(serializers.ModelSerializer):
    class Meta:
        model = IECommittee
        fields = '__all__'

class DonorEntitySerializer(serializers.ModelSerializer):
    class Meta:
        model = DonorEntity
        fields = '__all__'

# -------------------------
# transparency/views.py
# -------------------------
from rest_framework import viewsets, status
from rest_framework.decorators import action
from rest_framework.response import Response
from .models import Candidate, Race, IECommittee, DonorEntity
from .serializers import CandidateSerializer, RaceSerializer, IECommitteeSerializer, DonorEntitySerializer
from django.utils import timezone

class CandidateViewSet(viewsets.ModelViewSet):
    queryset = Candidate.objects.all()
    serializer_class = CandidateSerializer
    filterset_fields = ['contacted','source','race__id']

    @action(detail=True, methods=['post'])
    def mark_contacted(self, request, pk=None):
        candidate = self.get_object()
        candidate.contacted = True
        candidate.contacted_at = timezone.now()
        candidate.save()
        return Response({'status':'contacted'})

class RaceViewSet(viewsets.ModelViewSet):
    queryset = Race.objects.all()
    serializer_class = RaceSerializer

class IECommitteeViewSet(viewsets.ModelViewSet):
    queryset = IECommittee.objects.all()
    serializer_class = IECommitteeSerializer

class DonorEntityViewSet(viewsets.ModelViewSet):
    queryset = DonorEntity.objects.all()
    serializer_class = DonorEntitySerializer

# -------------------------
# transparency/urls.py
# -------------------------
from rest_framework.routers import DefaultRouter
from django.urls import path, include
from .views import CandidateViewSet, RaceViewSet, IECommitteeViewSet, DonorEntityViewSet

router = DefaultRouter()
router.register(r'candidates', CandidateViewSet)
router.register(r'races', RaceViewSet)
router.register(r'iecommittees', IECommitteeViewSet)
router.register(r'donors', DonorEntityViewSet)

urlpatterns = [
    path('', include(router.urls)),
]

# -------------------------
# transparency/management/commands/scrape_soi.py
# -------------------------
from django.core.management.base import BaseCommand
from transparency.models import Candidate, Race
from playwright.sync_api import sync_playwright
from datetime import datetime
import re

SOS_LISTING_URL = 'https://azsos.gov/elections/candidates/statements-interest'

class Command(BaseCommand):
    help = 'Scrape AZ SOS Statements of Interest and populate Candidate records'

    def handle(self, *args, **options):
        self.stdout.write('Starting SOI scrape...')
        with sync_playwright() as p:
            browser = p.chromium.launch(headless=True)
            page = browser.new_page()
            page.goto(SOS_LISTING_URL, timeout=60000)

            # Basic example: locate table rows containing candidates -- adapt selectors as needed
            # The SOI listing may have a link to a detail table or an external app.

            # Example strategy: look for links to apps.arizona.vote SOI listings and open them
            anchors = page.query_selector_all('a')
            found = 0
            for a in anchors:
                href = a.get_attribute('href')
                if href and 'apps.arizona.vote' in href and 'SOI' in href.upper():
                    try:
                        page2 = browser.new_page()
                        page2.goto(href, timeout=60000)
                        content = page2.content()
                        # naive parsing: find candidate name and email patterns
                        # You should inspect the actual apps.arizona.vote detail page and adapt selectors.
                        name_el = page2.query_selector('h1')
                        name = name_el.inner_text().strip() if name_el else None
                        # try to find email in the page
                        email_match = re.search(r'[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}', content)
                        email = email_match.group(0) if email_match else None

                        external_id = href
                        # simple race extraction (customize later)
                        race_text = None
                        race_obj = None
                        if name:
                            # create or update candidate
                            candidate, created = Candidate.objects.get_or_create(external_id=external_id, defaults={
                                'name': name,
                                'email': email,
                                'source': 'AZ_SOS'
                            })
                            if created:
                                found += 1
                                self.stdout.write(f'Added candidate: {name}')
                        page2.close()
                    except Exception as e:
                        self.stdout.write(f'Error opening {href}: {e}')
            browser.close()
        self.stdout.write(f'Done. Added {found} new candidates.')

# -------------------------
# transparency/tasks.py (celery task example)
# -------------------------
from celery import shared_task
from django.core.management import call_command

@shared_task
def run_scrape_soi():
    call_command('scrape_soi')

# -------------------------
# scripts/load_static_ie_db.py (simplified loader example)
# -------------------------
import csv
import os
import django

ios.environ.setdefault('DJANGO_SETTINGS_MODULE','config.settings')
django.setup()
from transparency.models import IECommittee, DonorEntity

CSV_PATH = 'data/ie_sample.csv'  # change to actual downloaded CSV

with open(CSV_PATH,newline='',encoding='utf-8') as f:
    reader = csv.DictReader(f)
    for row in reader:
        name = row.get('committee_name') or row.get('name')
        if not name:
            continue
        iec, _ = IECommittee.objects.get_or_create(name=name, committee_type=row.get('committee_type'))
        # donors could be extracted and aggregated similarly

print('IE DB loaded (basic)')

# -------------------------
# README.md (important instructions)
# -------------------------
# Arizona Sunshine — Phase 1 Backend

This repo contains a Django backend for Phase 1. It provides:
- Candidate, Race, IECommittee, and DonorEntity models
- DRF API endpoints for candidates and IE entities
- Playwright-based management command to scrape AZ SOS Statements of Interest
- Example script to load static IE CSV exports
- Optional Celery task for scheduling scrapes

## Quickstart (local, using Docker)
1. Copy `.env.sample` to `.env` and edit values.
2. Build and start services:
   ```bash
   docker-compose up --build
   ```
3. Inside the web service (or locally), run migrations and create superuser:
   ```bash
   docker-compose exec web python manage.py migrate
   docker-compose exec web python manage.py createsuperuser
   ```
4. Manually run the scraper to test:
   ```bash
   docker-compose exec web python manage.py scrape_soi
   ```

## Notes
- The Playwright scraper uses naive selectors — inspect the target pages and adapt selectors (CSS/XPath) to the real DOM.
- For scheduling, either add a cronjob or configure Celery Beat to call `transparency.tasks.run_scrape_soi` daily.
- Email workflow for Phase 1 is manual: the admin marks candidates as contacted in Django Admin.

# -------------------------------------------------
# End of scaffold file
# -------------------------------------------------
